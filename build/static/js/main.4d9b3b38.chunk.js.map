{"version":3,"sources":["Components/Navbar.js","Components/Footer.js","Components/DashboardView.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","DashboardView","role","placeholder","data-html","title","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSA+BeA,G,KA5BA,WACX,OACI,kBAAC,IAAMC,SAAP,KACI,gCAEJ,yBAAKC,UAAU,yDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,kBAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,kBACZC,gBAAc,iBACdC,gBAAc,QACdC,aAAW,qBACX,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,wBCLxCC,EAdA,WACX,OACI,kBAAC,IAAMV,SAAP,KACI,4BAAQC,UAAU,0CACtB,yBAAKA,UAAU,oBAAf,uCC8DOU,EA5DO,WAId,OACI,kBAAC,IAAMX,SAAP,KACI,kBAAC,EAAD,MAEA,0BAAMY,KAAK,OAAOX,UAAU,iBACxB,6BAASA,UAAU,WACf,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,gCAEf,yBAAKA,UAAU,8BACX,wBAAIA,UAAU,wBAAd,yBACA,0BAAMA,UAAU,cAAcW,KAAK,UAC/B,yBAAKX,UAAU,sBACX,yBAAKA,UAAU,mBACX,4BAAQA,UAAU,kBAAkBE,KAAK,UAAS,uBAAGF,UAAU,qBAEnE,2BAAOA,UAAU,eAAeY,YAAY,SAASV,KAAK,WAGlE,4BAAQF,UAAU,uBAAuBE,KAAK,UAA9C,YAUhB,uBAAGF,UAAU,aACT,uBAAGA,UAAU,wBAAwBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA3F,aAEA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA5F,iBACA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA5F,SACA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA5F,SACA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,2GAA5F,cACA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA5F,WACA,uBAAGd,UAAU,yBAAyBC,KAAK,IAAIE,cAAY,UAAUU,YAAU,OAAOC,MAAM,qCAA5F,YAKQ,yBAAKd,UAAU,kCAO3B,kBAAC,EAAD,QC7CDe,G,uLATb,OAEF,kBAAC,EAAD,U,GANkBC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d9b3b38.chunk.js","sourcesContent":["import React from 'react'\nimport './Components.css'\n\nconst Navbar = () => { \n    return (\n        <React.Fragment>\n            <header>\n        {/* Fixed navbar */}\n        <nav className='navbar navbar-expand-md navbar-dark fixed-top bg-dark'>\n          <a className='navbar-brand' href='/'>\n            UBER Analytics\n          </a>\n          <button\n            className='navbar-toggler'\n            type='button'\n            data-toggle='collapse'\n            data-target='#navbarCollapse'\n            aria-controls='navbarCollapse'\n            aria-expanded='false'\n            aria-label='Toggle navigation'>\n            <span className='navbar-toggler-icon' />\n          </button>\n          <div className='collapse navbar-collapse' id='navbarCollapse'>\n\n          </div>\n        </nav>\n      </header>\n        </React.Fragment>\n    )\n}\n\nexport default Navbar;","import React from 'react'\nimport './Components.css'\n\nconst Footer = () => {\n    return (\n        <React.Fragment>\n            <footer className='footer mt-auto py-3 bg-dark text-white'>\n        <div className='container-footer'>© 2019 Uber Technologies Inc.</div>\n      </footer>\n\n            \n\n\n        </React.Fragment>\n            )\n        }\n        \nexport default Footer;","import React from 'react';\nimport './Components.css';\nimport Navbar from './Navbar'\nimport Footer from './Footer'\n//import data from '../Twitter.json'\n//const data = require('../Twitter.json')\n//import { Doughnut } from 'react-chartjs-2';\n\n\nconst DashboardView = ()=>{\n\n\n    //  //\n        return (\n            <React.Fragment>\n                <Navbar />\n                {/* Begin page content */}\n                <main role='main' className='flex-shrink-0'>\n                    <section className=\"bg-dark\">\n                        <div className=\"card text-center text-light\">\n                            <div className=\"card-header bg-primary  p-5\">\n                            </div>\n                            <div className=\"card-body  bg-primary  p-5\">\n                                <h1 className=\"card-title display-3\">Últimas tendencias</h1>\n                                <form className=\"navbar-form\" role=\"search\">\n                                    <div className=\"input-group add-on\">\n                                        <div className=\"input-group-btn\">\n                                            <button className=\"btn btn-default\" type=\"submit\"><i className=\"fas fa-hashtag\"></i></button>\n                                        </div>\n                                        <input className=\"form-control\" placeholder=\"Buscar\" type=\"text\"></input>\n                                    </div>\n                                </form>\n                                <button className=\"btn btn-primary mt-2\" type=\"submit\">Analizar</button>\n                                {/* <p className=\"card-text\">\n                                    <a className=\"effect-underline mr-2 text-success\" href=\"/\">#Servicio</a>\n                                    <a className=\"effect-underline mr-2 text-info\" href=\"/\">#Promoción</a>\n                                    <a className=\"effect-underline mr-2 text-warning\" href=\"/\">#Taxi</a>\n                                    <a className=\"effect-underline mr-2 text-danger\" href=\"/\">#Funa</a>\n                                    <a className=\"effect-underline mr-2 text-success\" href=\"/\">#Conductor</a>\n                                    <a className=\"effect-underline mr-2 text-info\" href=\"/\">#Tarifa</a>\n                                    <a className=\"effect-underline mr-2 text-warning\" href=\"/\">#Cobro</a>\n                                </p> */}\n                <p className=\"card-text\">\n                    <a className=\"effect-underline mr-2\" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Servicio</a>\n\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Promoción</a>\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Taxi</a>\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Funa</a>\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Venía en el Uber y el conductor no hablo en todo el camino. ¡5 estrellas! ¡Excelente servicio!\">#Conductor</a>\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Tarifa</a>\n                    <a className=\"effect-underline mr-2 \" href=\"/\" data-toggle=\"tooltip\" data-html=\"true\" title=\"Mi uber driver:Excelente servicio\">#Cobro</a>\n                </p>\n\n\n                            </div>\n                            <div className=\"card-footer bg-primary p-5\">\n\n                            </div>\n                        </div>\n                    </section>\n\n                </main>\n                <Footer />\n\n            </React.Fragment>\n        )\n    }\n\n\nexport default DashboardView;","import React, {Component} from 'react';\nimport DashboardView from './Components/DashboardView'\nimport './App.css';\n\nclass App extends Component {\n\n  render(){\n\n  return (\n    \n<DashboardView />\n      \n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}